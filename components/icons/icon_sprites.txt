#############
ICON SPRITES
#########################################
	I. 	ABOUT SPRITES
	II.	SPRITE BACKGROUND IN CSS
	III.	SPRITE AUTOMATION WITH GULP
	IV.	SPRITE AUTOMATION WITH WEBPACK
#########################################

###################
I.	ABOUT SPRITES
###################

Sprites comes from a computer graphics technique whereby you fetch an image once and display parts of it when necessary. For web pages this means you generate just one http-request for the combined graphic, which improves loading speed.

Most frequent use case: icons, flags, and collections of smaller images.

An SVG sprite sheet works like this: All of your icons are combined into one .svg file that is included in the page or referenced as external source, and you call upon the reference of each icon using the following syntax:

	<svg>
  		<use href="pathSpriteName#my-icon"></use>
	</svg>

You can style the outer SVG element with CSS.

SVG SPRITE FILE CONTENT

When using the <symbol> element inside an SVG and HTML like can be added that you can reference outside this file. 

This what packages such as GULP SVG SPRITE do. They store the coordenates of each icon and attach to it an ID.

<svg xmlns="http://www.w3.org/2000/svg">
    <symbol viewBox="0 0 100 100" id="square_icon">
        <path d="M10 10H90V90H10Z"/>
    </symbol>
    <symbol viewBox="0 0 100 100" id="circle_icon">
        <circle cx="50" cy="50" r="40"/>
    </symbol>
</svg>


###################################
II.	MANUALLY USING SPRITES IN CSS
###################################

The source file referenced with url() function, this all elements with this class will have the entire png file as their background.

 	.flags-canada, .flags-mexico, .flags-usa {
  		background-image: url('../images/flags.png');
  		background-repeat: no-repeat;
	}

But, you reference the position in the .png file: on x-as and y-axis for each element individually so only a copy of the correct coordinates is displayed.

 	.flags-canada {
  		height: 128px;
  		background-position: -5px -5px; 
	}

The problem with approach that it becomes very tedious to write the css because you have to manually find each image position. You can automate this process by using a taskrunner such as webpack or gulp.


#################################
III.	SPRITE AUTOMATION WITH GULP
#################################

SEE GULP docs for more details.

The package we need is SVG SPRITE, see docs for full options list.
 	
 	npm install gulp-svg-sprite --save-dev	

Create a svg-sprite tasks in the gulpfile.js that generate an svg file: sprite-xxx.svg

In the SVG SPRITE OPTIONS you set MODE to SYMBOL. Thus will make sure that you can reference the icons by using # symbol in the HTML without additional css.

In the example below we reference the #star icon.

 	<h2 class="section-title">
          <svg class="section-title__icon">
            <use href="<path>/sprite.symbol.svg#star"></use>
          </svg>
          Our Features
	</h2>

REFERENCE: https://www.tomhazledine.com/inline-svg-icon-sprites/

###################################
IV.	AUTOMATE SPRITES WITH WEBPACK
###################################

REFERENCE:

https://community.wia.io/d/6-generating-an-svg-sprite-sheet-with-webpack
