################################################
REACT: A JS LIBRARY FOR BUILDING USER INTERFACES
################################################
I.	ABOUT
II.	SETUP
III.	THINKING REACT
####################

###########
I.	ABOUT
###########

SPA
The problem that Single Page Apps solve is that you can offer the user an native-like experience whereby you do all interactions within the same page. That does not mean the an entire website should be build by using React, some routes are better suited for a single page architecture, other parts make be best rendered on the server as a seperate page.

Every item in the UI is a component. All components are combined and can interact with each other to create a smooth user experience in complex apps.

Especially useful for app's that handle a lot of data. When the data changes, many components in the UI may have to be updated and this can become a very tedious task with lot's of code (See Yelp Camp). 

React will efficiently update and render just the right components when your data changes.

COMPONENTS

Each block on the page is a component whereby you broadly define what it should look like and what it's functionality should be. Then, you can fill up that component with whatever data that comes in or should be rendered statically.

Components are then nested to form part of a larger component etc. to form a fully functioning UI.

STATE CHANGES

React re-renders the components each time there is a state change, for example, when new data comes from the server. With normal AJAX code you need eventListeners and select each component you want updated. 

React manages this for us very efficiently as it does not re-render all components. Only the component that is affected by the state change and the child components inside. All other UI components remain unchanged.


###########
II.	SETUP
###########

A.	Create React App in NodeJs

	npx create-react-app .

Creates a new react app in the current folder.

B.	From scratch: 


FOLDER STRUCTURE

In the PUBLIC folder all the static files live, including the index.html. It has an emty body that is filled with JS scripts during the build process.

The manifest.json is for SPA configuration with offline capabilities.

In the SRC folder we have the code we develop with.

The index.js hooks up with html and renders the APP inside the DOM at the root element, which is the <div id="root"></div> inside the <body> element.

The App.js is the actual app code that gets rendered.

NPM COMMANDS

When you want to modify how React works, especially the Webpack configuration, then you can EJECT the app, which will expose all the config files.

Other commands are: run the dev server, the build process and a test command.

VS CODE PLUGINS

Es7 React snippets
	
-> create new functional components type: rfc 


####################
III.	THINKING REACT
####################

The process of building a scalable UI in React has the following steps:

A.	COMPONENT HIERARCHY

Break down the UI in small components with a SINGLE responsibility, based on the DATA MODEL.

Make a schema of the component hierachy with parents and children.

B.	BUILD THE STATIC VERSION WITH JSX

This phase is a lot of typing and little thinking. You do pass in the props from parents to children but leave STATE out of it.

State is reserved only for interactivity. 

In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up and write tests as you build.

At the end of this step, you’ll have a library of reusable components that render your data model. The main parent component will take in the data model as a PROP.

C.	IDENTIFY STATE CHANGES

To make your UI interactive, you need to be able to TRIGGER CHANGES to your underlying data model. 

React achieves this with state.

Figure out which one of the changes is state. Ask three questions about each piece of data:

	- Is it passed in from a parent via props? If so, it 	probably isn’t state.
	- Does it remain unchanged over time? If so, it probably 		isn’t state.
	- Can you compute it based on any other state or props in 	your component? If so, it isn’t state.

Example: The original list of products is passed in as props, so that’s not state. 

The search text and the checkbox seem to be state since they change over time and can’t be computed from anything. 

And finally, the filtered list of products isn’t state because it can be computed by combining the original list of products with the search text.

D.	IDENTIFY STATE OWNER

Identify which component mutates, or owns, the state. React has a one-directional data flow from parents to its children. Find the component highest up the chain, especially if various children are affect by state changes.

Then set the initial state in the correct component.
Pass the state variable to as prop to parent element.

E.	INVERSE DATA FLOW VIA INPUT

By default the data-flow in react is one-directional from parent to child, and thus the default input value that is displayed is taken from the state and all inputs are ignored (read-only).

When you add an onChange={} attribute however, we can specify handler functions that update the state in the component where it is owned or located and that state changes will trigger the update.
