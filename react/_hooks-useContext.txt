###########
CONTEXT API
###########

So far all props had to be referenced manually in each component but if you want to share the same prop over various components the process becomes tedious.

You define the context inside the App.js and then import it into the components you want.

It mimics the use of a global variable, which is not possible with modules in React.

A good use case is the use of a Theme with pre-defined style properties. You define that theme on the components in App.js and in each Component you can import it with two lines of code. Or the current authenticated user or preferred language.

A.	PROVIDER/CONSUMER

Each context has two components: a PROVIDER and a CONSUMER. The provider provides a value, the consumer consumes that value.

The provider encloses the components, it has to provide values for those components and needs an ATTRIBUTE called value={{}}. That value usually is an object with various style rules.

Note that the value of the key is a variable called theme. Theme is going to refer to a STATE of our application. Just changing the context is not going to re-render a component. You need a state change to trigger that. 

For example, with a toggle btn that sets the bgColor to blue, or from blue to red.

B.	CREATE/PROVIDE A CONTEXT

import React, { useState } from 'react';

export const <context-name> = React.createContext();
function App() {
	//define state
	const [theme, setTheme] = useState('red');
	return (
    <ThemeContext.Provider value={{ backgroundColor: theme}}>
      Counter
      <Counter initialCount={0}/>
      CounterHooks
      <CounterHooks initialCount={0} />
	<button onClick={() => setTheme(prevTheme => {
		return prevTheme === 'red' ? 'blue' : 'red'
	})}
    </ThemeContext.Provider>
  );
}

C.	USE/CONSUME CONTEXT INSIDE COMPONENT

CLASS COMPONENT

Create a consumer context with <ThemeContext.Consumer>. Inside use a function that returns the Components with the style attribute applied from the value it gets through the context. style => ( ... )

import { ThemeContext } from './App';

export default class Counter extends Component {
    render(){
        return (
            <ThemeContext.Consumer>
                {style => (
                <div>
                    <button style={style} onClick={() => this.changeCount(-1)}>-</button>
                    <span>{this.state.count}</span>
                    <button style={style} onClick={() => this.changeCount(+1)}>+</button>
                </div>
                )}
            </ThemeContext.Consumer>
        )


FUNCTION COMPONENT

Can be accomplished with just one line + an attribute update: define a variable that uses the contenxt defined in App.js. Then use that variable as the attribute value on the element of choice.

import React { useContext } from 'react'

export default function CounterHooks({ initialCount }){
    const [count, setCount] = useState(initialCount)
    const style = useContext(ThemeContext)

    return ( 
		<element style={style}></element>
		... )

Note that useContext has the same restriction as the useState: it needs to be defined inside the function component at the very top.
