/*
  #########
  CSS GRID
  #############################################################
    1.  HOW GRID WORKS
    2.  GRID WITH ROWS, COLUMNS AND AREA'S FOR FULL PAGE LAYOUT
    3.  A CARD WITH AREA'S
    4.  SETTING UP THE GRID WITH GRID TEMPLATE SHORTHAND
    5.  GRID WITH ROW AND COLUMS ONLY FOR PART OF PAGE
    6.  ALIGN ITEMS INSIDE A GRID CELL
    7.  ALIGN THE GRID ITSELF INSIDE A BIGGER SIZE CONTAINER
    8.  SPECIAL FUNCTIONS    
    9.  GRID ANIMATION
    10. GOOD TO KNOW    
  #############################################################
  
  ##################  
  1.  HOW GRID WORKS
  ##################  

  To get started you have to define a container element as a grid with 
  display: grid, set the column and row sizes with grid-template-columns and 
  grid-template-rows, and then place its child elements into the grid with 
  grid-column and grid-row.

  Display: grid; on the containing element -the grid container, makes all 
  direct elements into GRID-ITEMS. Even plain tekst will be converted into a
  kind of virtual element in order to fit it into the grid.
  
  There is a GRID GAP, that is set to zero by default. A grid gap 
  cannot hold any elements. You can differentiate between grid-row-gap and 
  grid-column-gap.

  GRID LINES

  Each row and column have a number whereby the very first line, before the first
  column is the starting point or number 1.  

    |1 column |2 column |3 column |4 column |5 column

  Thus when selecting column three and four you have to select line 3 and 5.

  You can explicitely name the lines. In the example below we create three rows

    grid-template-rows: [line1] 20px [line2] auto [line3] 50px [end];

  PLACING ITEMS ON THE GRID

  This can be done through the use of the grid-area property (easy), manually 
  by using the properties grid-column and grid-row or automatically by setting
  the grid-auto-flow: column/row on the grid container.

  The example below will position the grid-item in the column track between 
  line 1 and 3. And in the row track between line 2 and 5.

    grid-column: 1 / 3;
    grid-row: 2 / 5;
  
  If you don't specify an end line the item will span one track. Or you can 
  specify the number of tracks to span:

    grid-row: 1 / span 3; 
  
  CELLS AND AREA'S

  You can also define rectangular GRID CELLS and GRID AREA's. A grid cell is 
  the space between two row lines and two column lines.

  A grid area can be just one GRID CELL or mulitple adjacent cells.

  Elements INSIDE a GRID-ITEM can be positioned using flexbox or you use NESTED
  or SUBGRIDS (level 2).

  ###########################################################
  2.  GRID WITH ROWS, COLUMNS AND AREA'S FOR FULL PAGE LAYOUT
  ###########################################################

  All of the below is done on the GRID CONTAINER.

  ROWS

  Grid template ROWS you indicate the the HEIGHT of each row you want to 
  create. Thus 100px 100px 100px creates three rows of equal height. In the
  example below we will simulate a HEADER row, a HERO row, a MAIN row and a 
  FOOTER row. 

  If you use AUTO than the height or width will depend on the size of the 
  content elements.
  
  COLUMNS

  For the grid template column you indicate the WIDTH of each column. If you 
  want to have sections span over multiple column this is perfectly possible, 
  but you have define the pattern first.

  GRID AREAS

  Once the GRID is set up with rows and columns you have a grid of cells or
  AREA's that can be named and asigned to HTML elements.

  When using the grid template area property you follow the pattern setup in 
  the rows and columns. In the example below we have four rows and and four
  columns thus you use 4 STRINGS with 4 words.

  The first row has four areas that all get named the same and asigned to the
  .header class with the grid-ares: "header" property. This means the HTML 
  element with the class .header gets assigned 4 grid areas on the first row.

  Similarly, the footer element and the hero element get assigned the same 
  areas on row 4 and 2 respectively.
  
  The main element only gets assigned one grid area on row 3, as well as the
  sidebar element.
*/
  .container {
    display:grid;
    grid-template-rows: 10em 50vh auto 10em;
    grid-template-columns: 1fr 5fr 2fr 1fr;
    grid-template-areas: 
      "header header header header"
      "hero hero hero hero"
      ". main sidebar ."
      "footer footer footer footer";
  }  

  .header { grid-area: header;}
  .hero { grid-area: hero;}
  .main { grid-area: main;}
  .sidebar { grid-area: sidebar;}
  .footer { grid-area: footer;}
/*
  ######################
  3.  A CARD WITH AREA'S
  ######################

  Here we create a card with two rows: a title row and a content row. The 
  content row contains an image and a description.

  The title row height is set to min-content, which will take the minimum 
  height necessary for displaying the title box element, not more.

  The second row is set to auto as it will depend on the size of the image
  and the description text.

  We also create two columns, one for the image and one for the title and 
  description.

  Thus we have a 2x2 grid that we assign as follows:

    | 11 img | 12 title
    | 21 img | 22 description
*/
  .card {
    display: grid;
    grid-template-rows: min-content auto;
    grid-template-columns: 1fr 3fr;
    grid-template-areas:
      "img title"
      "img description"
  }

  .card__img { grid-area: img; }
  .card__title { grid-area: title; }
  .card__description { grid-area: description; }
/*
  ####################################################
  4.  SETTING UP THE GRID WITH GRID TEMPLATE SHORTHAND
  ####################################################

  The above setup can be shortened with the property grid-template whereby you
  write the following syntax:
    
    grid-template: 
      "<row-area-names>" <row-height>
      "<row-area-names>" <row-height>
      ...
      / <column-height> <column-height> ...
  */
  .card {
    display: grid;
    grid-template: 
      "img title" min-content 
      "img description" auto
      / 1fr 3fr;
  }

  .container {
    display:grid;
    grid-template:
      "header header header header" 10 em
      "hero hero hero hero" 50vh
      ". main sidebar ." auto
      "footer footer footer footer" 10em
      / 1fr 5fr 2fr 1fr;
  }  

  /*
  ##################################################
  5.  GRID WITH ROW AND COLUMS ONLY FOR PART OF PAGE
  ##################################################

  Create a grid with 8 rows and 5 columns and a grid gap.
  You indicate for each element how much rows and columns it can span over.
*/
  .container {
    display: grid;
    grid-template-rows: repeat(8, 1fr);
    grid-template-columns: repeat(5, 1fr);
    grid-gap: 20px;
  }

  .item--small {
    grid-row: span 1;
    grid-column: span 2;
  }

  .item--wide {
    grid-row: span 1;
    grid-column: span 4;
  }

  .item--big {
    grid-row: span 3;
    grid-column: span 5;
  }
/*
  ##################################
  6.  ALIGN ITEMS INSIDE A GRID CELL
  ##################################
  
  The grid items you place into the cells do not always fill that cell 
  completely. Thus to center, for example, paragraphs and titles inside the 
  GRID CELL we can use justify items and align-items on the GRID CONTAINER:

  Justify will arrange the the items on the main axis (row), while align items
  will arrange the items on the cross axis (column). The default value is 
  stretch.

    justify-items: start, center, end; 
    align-items: start, center, end;

  Note that you can also set this property on the grid-items using the 
  properties: align-self: center or justify-self: 
  The shorthand property for a combination of both:

    place-items: start, center, end;
  
  ########################################################
  7.  ALIGN THE GRID ITSELF INSIDE A BIGGER SIZE CONTAINER
  ########################################################

  When all the grid-items have a fixed non-flexible width in px the grid cannot
  stretch by default to fill the container.

  Then you can use the justify-content and align-content or shorthand 
  place-content properties to position the grid inside its container.

  There are more values possible: space-evenly, space-between and space-around 
  will split up the tracks and create gaps  
  
  #####################
  8.  SPECIAL FUNCTIONS
  #####################

  The minmax() property allows you to more precisely define the width or height
  of the tracks by setting a minimum value. The example below will set the 
  second column to be no less than 200px and try occupy 1fr.

    grid-template-column: 200px minmax(200px, 1fr) 

  The repeat() function allows you to type less by creating x columns or rows
  of the same size. The example below will create 10 rows with min width of 
  200px and a max of 1fr.

    grid-template-row: repeat(10, minmax(200px, 1fr);

  You can let the browser do all the calculations by using auto-fill. The 
  browser will calculate how many columns or rows it needs to fit the 
  requrements.

    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr); 
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr);  

  When using auto-fit, the items are fluid on big screens, thus grow beyond the
  200px while auto-fill will extra empty columns.
  ##################  
  9.  GRID ANIMATION
  ##################

  Setting the width of column and height of rows by default to a slightly 
  smaller value than what you eventually want. Upon loading the page or 
  scrolling down you can use JS to add a class that modifies the 
  grid-template-row/column values and decreases/increase the grid-gap.
  
  ################
  10. GOOD TO KNOW
  ################
  
  De CSS grid bestaat alleen binnen de CSS, niet in de DOM. Je kan dus niet de
  DOM manipuleren en elementen erbuiten zetten (bijv. een vertikale lijn links)

  Margin collapse does not happen when the grid is active. 

  You can set grid on the BODY element for full page layout.

  The make GRID fully responsive you can go along way with the minmax() 
  property but to make it work on smaller screens or super large screen you
  may have to re-arrange area's with MEDIA QUERIES.

  - Use height: 100%; on body and html to avoid scroll bars 

  - To create a site for mobile or tablet views that can swipe left and right
  you can set the GRID on the BODY element with columns of width: 100%

    body { display:grid; grid-template-columns: repeat(6, 100%);}
*/