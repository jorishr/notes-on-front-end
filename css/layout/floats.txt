######
FLOATS
#########################################################
I. 	ABOUT
II.	CLEAR
	A.	WITH EMPTY DIV	
	B.	WITH NEXT CHILD ELEMENT
	C.	ON THE PARENT ELEMENT
	D.	WITH RE-USABLE CODE: MIXIN ::after
III.	SIMULATE CENTERING BLOCK LEVEL ELEMENTS WITH FLOATS
#########################################################

##################
I.	ABOUT FLOATS
##################

The default HTML behavior for elements is to stack vertically in a single column and each block-level element fills 100% width of its parent element. 

The HEIGHT of each block is determined by the size of its content, UNLESS you specify a specific height.

By FLOATING an element you take control of it's horizontal position. Thus "float:left;" tells the browser to align the block element on the left side of the parent element.

- float: left; (top-left of the parent container)
- float: right; (top-right of the parent container)

IMPORTANT: it also tells other surrounding elements (usually the one directly below) they can flow around the floated element, and no longer stack underneath it. They will appear next or in between floated elements. 

To correct or end this behavior use "clear" or "hidden overflow" techniques.

Het probleem met floats onstaat wanneer je 'cards' of img een heel verschillende hoogte hebben. Dan moet je extra code gaan schrijven voor 'wrapping' en 'clearing'. Dit kan je omzeilen met nieuwere technieken zoals CSS Grid en CSS Flexbox;

###########
II.	CLEAR
###########

	A.	CLEAR WITH AN EMPTY DIV

The html div is empty but assigned a class .clear{clear:both;}. This is sloppy because it adds needless html.

	B. 	CLEAR WITH THE NEXT CHILD ELEMENT

You tell the next block element in css to ignore any floats that came before it. Basically forcing the block element to go back to default HTML behavior.

	clear: both; OR left/right

This works well but the next child element may get removed in a later stage and you one may forget to update the clear property on the next new element. Thus not ideal solution either.

	C. 	CLEAR WITH THE PARENT ELEMENT

Add "overflow" property to the parent element so it recognize the height of the floated elements inside it and takes up the height of the biggest floated element. 

	overflow:hidden;

NOTE: You can check this with a border or background-color.

This solution may conflict with wrappers on the parent element or may be hard to track if there a lot of other elements inside the parent that preceed the floats. And, this code is hard to re-use.

HIDING OVERFLOW FOR CONTENT

Als je de tekst wel naast maar niet onder de afbeelding wil, ook dan is overflow:hidden nuttig. Je declareert dan niet ter hoogte van de parent div maar bij de class van de betreffende tekst.


	D. CLEAR WITH PSEUDO ELEMENTS AND MIXINS &::after

The &::after will add some empty css content just after the element to which you apply it.

@mixin clear{
	&::after{
		content:""; 
		clear:both;
		display:table;
	}
}

	@include clear	// on the parent div class 

This solution means you have re-usable code that can be inserted everywhere in your project when you need to clear floats. 

To summarize, when you have an extra unfloated HTML element at the bottom of a container div, use the clear solution. Otherwise, add an overflow: hidden declaration to the container element.


#########################################################
III.	SIMULATE CENTERING BLOCK LEVEL ELEMENTS WITH FLOATS
#########################################################

This is a particular case for using an image centered in between two paragraphs that wrap there text around the image.

Reference: https://css-tricks.com/float-center/

The html markup is simple: 

	div.page
		img
		div.left
		div.right

In the css you add a pseudo class to both the left and right div. The div on the left-side gets asigned a pseudo class which float:right and you give it the height of the image and 50% of the width of the image. 

This creates a space on the right edge of the div with the paragraph text wrapping around that space.

On the other side you repeat the same thing in reverse.

#left:before, #right:before { 
  content: ""; 
  width: 125px; 
  height: 250px; 
}
#left:before { 
  float: right; 
}
#right:before { 
  float: left; 
}

The image then is set to position:absolute; and top:0; to fill the gap. Or you can create div above and use a negative margin to push it down.





