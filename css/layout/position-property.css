/*
    #####################
	CSS POSITION PROPERTY
	#####################
	
	The default value for the position property of an element is 
	position:static. When it is not static, the element is considered a to be a
	“positioned element”.

	1.	POSITION: RELATIVE

	Relatief betekent gepositioneerd relatief tov van de positie waar het zich 
	standaard bevindt in de static flow van de pagina.

	Belangrijk! De andere elementen rond dit element ondergaan geen wijziging.
	Zij zullen worden gerendered alsof het positioneerd element op z'n 
	standaard positie zit. Dit kan dus voor overlapping zorgen.

	Als je omliggende elementen wil laten meeschuiven dan kan gebruik maken 
	van een negatieve marge op het gepositioneerd element gelijk aan de grootte
	van de verschuiving. 
		
		.positioned { postion: relative; top: -10px margin-bottom: -10px} 

	The offset on can be on the x or y axis using top-right-bottom-left and 
	this can include negative values. Various offsets can be combined.
*/
	.class {
		position: relative;
		left: 100px; 
		right: -100px;
		top: 30px; 
		bottom: -30px;
	}
/*
	2.	POSITION: ABSOLUTE

	Similar to RELATIVE but the positioning is now RELATIVE to the BROWSER 
	WINDOW OR THE CLOSEST ANCESTOR that is positioned as well. But not to the 
	standard static position.

	Plus, it completely removes an element from the normal flow of the page, so
	the other elements are affected by it because the absolute positioned 
	element is completely removed from it's static position.

	Example, a flex-container with three elements that are horizontally aligned
	with justify-content: flex-start; You lift up the middle one to the top of 
	the screen and the remaining flex-items will appear next to each other at 
	the start, as if the middle one doesn't exist. With a relative postioned 
	flex-item this does not happen.

	RELATIVE ABSOLUTE

	If you position an element as absolute this is relative to the closest 
	ancestor that is positioned as well. If none is found, it'll be relative to
	the browser window as explained above. 
	
	Thus, if we position the parent container, the position:absolute/relative; 
	the positioned element will be relative to the top-left corner of that 
	container.
*/
		.container {
			position: relative;
		}
		.container-item {
			position: absolute;
			left: 50px;
			top: 50px;
		}
/*
	3.	POSITION:FIXED

	Dit is identiek aan absolute: dus uit de flow van de pagina en je kan het
	herpositioneren relatief tov de linkerbovenhoek van de containing div of de
	browser window.

	Het verschil is dat fixed op het scherm blijft wanneer je scrolt. Handig 
	voor een menubar want het blijft op de aangegeven positie.

	4.	POSITION STICKY

	An element is treated as relative until a threshold is met, from then on 
	it is treated as fixed. This usefull for heading when scrolling. Once you
	scroll below the heading becomes fixed untill you reach the next section.
	https://css-tricks.com/position-sticky-2/

		position: sticky;
		top: -1px;

	Important: the sticky element still stays within its container. Thus when
	you scroll beyond the bottom of the containing parent element it will no 
	longer be visible.

	If the containing div is the body, this is obviously not the case.

	Usually you have it on the top: 0; or bottom: 0; 
	To have a button slide from underneath a text you can set position: sticky
	and z-index: -1; plus a white background on the text. The btn will then be
	moving all the time but only be visible on scroll.

	5.	Z-INDEX

	Je kan de browser opgeven welke van de overlappende elementen als bovenste 
	moet worden weergegeven met een index-waarde -1, 0, 1, 2. Dit werkt alleen
	voor elementen die gepositioneerd zijn (absolute, relative, fixed, sticky).

	Dit is handig in combinatie met opacity (0 is onzichtbaar, 1 is solid) voor
	layering.
*/
