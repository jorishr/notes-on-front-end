###############
NODE PROPERTIES
#############################
I.	NODE PROPERTIES
II.	ELEMENT NODE ATTRIBUTES
#############################

#####################
I.	NODE PROPERTIES
#####################

Eacho node can have properties specific to that node or nodetype but there are common properties inherited from parent classes.

NODETYPE, NAME AND VALUE

elem.nodetype 	
//-> 1 for ELEMENT NODE, 3 for text nodes, 9 for root document
elem.nodeName	
elem.tagName	//-> only available for ELEMENT NODES
elem.nodeValue	//-> usually only for text/comment nodes
elem.data		//-> same as nodeValue

INNERHTML

elem.innerHTML
The innerHTML property allows to get the HTML INSIDE the element as a string.

You can modify the innerHTML by using elem.innerHTML = '<new html>' and do a full overwrite. To appendhtml you can use += but this too overwrites the original:
elem.innerHTML += '<newHtml>' is the same as 
elem.innerHTML = elem.innerHTML + 'newHtml'

OUTERHTML
The outerHTML property contains the full HTML of the element. That’s like innerHTML plus the element itself.

Writing to outerHTML does not change the element. Instead, it replaces it in the DOM by the new HTML. The old reference may continue to be used.

TEXTCONTENT
The textContent provides access to the text inside the element: only text, minus all <tags>.

<div id="news">
  <h1>Headline!</h1>
  <p>Martians attack people!</p>
</div>

news.textContent		//-> Headline! Martians attack people!

Writing with textContent is considered to be the safe way to modify text inside an element.

ROOT DOCUMENT PROPERTIES

Return the absolute base URI or domain of the document

document.baseURI
document.domain
document.URL

Return the <body> or <head> element

document.body
document.head

Returns the document's cookie

document.cookie

Return all form/img elements

document.forms		//-> HTML Collection
document.images		//-> HTML Collection

To make the entire body of the document editable:

document.body.contentEditable = true;


#############################
II.	ELEMENT NODE ATTRIBUTES
#############################

elem.attributes				//-> show all attributes
elem.hasAttribute(name) 		//-> checks for existence.
elem.getAttribute(name) 		//-> gets the value.
elem.setAttribute(name, value) 	//–> sets the value.
elem.removeAttribute(name) 		//–> removes the attribute.

DATA-ATTRIBUTES
Data-attributes written in HTML are available in the object dataset.

elem.dataset	//-> DOMStringMap {...}
elem.dataset.<data-attribute>

STYLE ATTRIBUTES
Are stored in the CSSStyleDeclaration object: 
elem.style 	//-> CSSStyleDeclaration {...}
elem.style.background = 'green';

To reset a style property you do not remove it but set the value of the attribute to an empty string:

elem.style.display = 'none';
elem.style.display = '';		
//-> back to 'normal' as the browser applies CSS classes and its built-in styles normally, as if there were no such style.display property at all.

COMPUTED STYLES
The style property operates only on the value of the "style" attribute, without any CSS cascade.

So we can’t read anything that comes from CSS classes using elem.style.

A computed style value is the value after all CSS rules and CSS inheritance is applied, as the result of the CSS cascade.

To know what CSS styles are being applied by the stylesheets you need to use the getComputedStyle(element, [pseudo]) property.

You can store the computed styles as an object in a variable:

let computedStyle = getComputedStyle(document.body);


CLASSES
If we assign something to elem.className, it replaces the whole string of classes. Therefore usually you will work with elem.classList to which you can ADD-REMOVE-TOGGLE individual classes.

elem.classList.remove('class');
elem.classList.addd('class');
elem.classList.contains('class');	//-> true/false


