##########
SHADOW DOM
###################################
I.	WHAT IS A SHADOW DOM
II.	HOW TO IMPLEMENT A SHADOW DOM
III.	USE CASE: BBC
###################################

###########################
I.	WHAT IS A SHADOW DOM?
###########################

The problem: CSS is global. Thus with just one DOM a css style rule could affect any element in the application. This means that when you would add an external component to the app that is written with a given set of classes in its markup, the styling may become unpredictable.

The shadow DOM is a locally scoped subtree that can be placed inside an element that is not affected by the global css style rules. For the end-user however, there is no visible difference.

Styles created inside the single Shadow DOM element are isolated and stays in the scope of that Shadow DOM. 

Shadow DOM is a tool used to build component-based apps and websites.

The difference between the regular DOM and a Shadow DOM is the local scope. Plus changes made to the regular DOM usually mean that the entire DOM needs to re-rendered, thus hindering performance. With a chuncks of Shadow DOM specific parts of the DOM can be targeted without a full re-render of the entire object model.

VIRTUAL DOM
The only thing which is common for both VIRTUAL DOM and SHADOW DOM is that they help with performance issues. 

Both create a separate instance of the Document Object Model. Virtual DOM is creating a COPY of the whole DOM object. 

The Shadow DOM creates small pieces inside of the DOM object which have their own, isolated scope for the element they represent.


############################
II.	IMPLEMENT A SHADOW DOM
############################

1. 	SHADOW HOST ELEMENT
Select an HTML element that is going to be the HOST element for the new DOM TREE.

<div id="shadowHost"></div>

In JS you select that HOST ELEMENT and create a NEW DOM ROOT ELEMEMT.

To that new ROOT ELEMENT you can append child elements, most likely a template.

const host = document.querySelector('#shadowHost');
const shadowRoot = host.attachShadow(shadowRootInit);

shadowRoot.appendChild(<element or template>);

2.	TEMPLATE

TEMPLATE is a HTML5 element that does not get rendered by default. It can contain style tags and regular html elements.

<template id="template">
	<style>*{color: red;}</style>
	<div><p>Hello world!</p></div>
</template>

To RENDER, append the CONTENT the shadowRoot:

const template = document.querySelector('#template').content;

shadowRoot.appendChild(template);


#######################
III.	USE CASE EXAMPLES
#######################

BBC
https://medium.com/bbc-design-engineering/goodbye-iframes-6c84a651e137

Other example
https://www.youtube.com/watch?v=pQOuHNm5seY&list=WL&index=34