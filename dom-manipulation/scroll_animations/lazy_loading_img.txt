############
LAZY LOADING
####################################
	I. 	jQUERY
	II.	INTERSECTION OBSERVER API
####################################
	
Images are only loaded in when the user comes close the section that contains an image.

#########
I. jQUERY
#########

###############################
II.	INTERSECTION OBSERVER API
###############################

In HTML replace the SRC attributes on the <img> tags with a DATA-SRC attribute.

In JS select all elements with the data-src attribute, as there may be <img> tags that you don't want to lazy load.

The actual code to run upon intersecting is place in a seperate function preloadImg(); and what it does is copy the content of the data-src attribute into the SRC attribute.

	const images = document.querySelectorAll('[data-src]');
	
	const imgObserverOptions = {
		rootMargin: 0px 0px 400px 0px
	}
	
	const imgObserver = new IntersectionObserver(function(
		entries,
		imgObserver	
		){
			entries.forEach(entry => {
				if(!entry.isIntersecting){return;}
				else {
					preloadImg(entry.target);
					imgObserver.unobserve(entry.target);
				}
			});
	}, imgObserverOptions);

Store the conten of the data-set attribute in variable. Add that variable to the SRC attribute of the img. If for some reason no src attribute is present on the img, abort.

	const preloadImg = function(img) {
		let source = img.getAttribute('data-src');
		if(!img.src) { return; };
		img.src = source;		
	}

CALL THE FUNCTION

	images.forEach(image => {
		imgObserver.observe(image);
	});

IMPORTANT

To avoid issues with browser-rendering you can setup your CSS with min-width and min-height for your images. By default this is ZERO for the img tags and by not loading them, your layout may get screwed up, espacially with images next to each other. 

	[data-src] {min-width:100px; min-height:10px;}

