#######################
ABOUT SCROLL ANIMATIONS
#######################

In general there are four ways to achieve animation effects when the user scrolls up or down a page.

I.	PURE CSS: snap-scroll, scroll-behavior;
II.	Vanilla JS; 
III.	Intersectional Observer API; 
IV.	jQUERY; 
V.	Specialist JS libraries.

You need a set of functions and variables to detect the scroll and the amount of scrolling.

This can be done with an eventListener but this is taxing on the browser's resources. A more efficient way is to use the intersectional observer API that allows callback functions that only get executed scroll is actually happening beyond a observed point on the page.

For basic webpage functionality vanillajs, intersectional observer API or jQuery will do the job. For more advanced animations you can look into specialist js libraries.

##############
I.	PURE CSS
##############

A.	SNAP SCROLLING

Once you get to a specific section the scroll SNAPS into the full view of that section without having to scroll down further down or up.

Use the container element, usually the BODY element.
	
	body {scroll-snap-type: y mandatory; overflow-y: scroll;}

To have a more subtle effect use:

	body {scroll-snap-type: y proximity; overflow-y: scroll;}

On the SECTION ELEMENTS you add a scroll alignment:
	
	section {scroll-snap-align: start/center/end;}

If you have STICKY NAV BAR, you can account for that by adding a SCROLL PADDING:

	body {
		scroll-snap-type: y mandatory; 
		scroll-padding-top: 150px;}

	
B.	SMOOTH SCROLL

See smooth scroll doc.


################
II.	VANILLA JS
################

GET WIDTH/HEIGHT OF THE DOCUMENT
Because of browser inconsistencies the most reliable way to get the maximum height/width of a page is to get to use the max value from the following properties:

let scrollHeight = Math.max(
	document.body.scrollHeight, 	document.documentElement.scrollHeight,
  	document.body.offsetHeight, 	document.documentElement.offsetHeight,
  	document.body.clientHeight, 	document.documentElement.clientHeight
);

GET CURRENT SCROLL HEIGHT/WIDTG
Here too you can get browser inconsistencies but scrollTop/Left is pretty reliable.

document.documentElement.scrollLeft
document.documentElement.scrollTop

To be absolutely sure use the window page offset property:

window.pageYOffset;	//-> vertical offset
window.pageXOffset;	//-> horizontal offset

SHOW CURRENT SCROLL WITH EVENT LISTENER

window.addEventListener('scroll', function() {
  	elem.innerHTML = window.pageYOffset + 'px';
});


SCROLL TO POINT ON PAGE

Scroll down or left x pixels: window.scrollBy(x, y);

Scroll the page to absolute coordinates relative to top left corner: 

window.scrollTo(0,0);		//-> top: 0 left: 0 of the page

SCROLL INTO VIEW

elem.scrollIntoView()		//-> elem at top of the window 
elem.scrollIntoView(false)	//-> elem at bottom of the window

PREVENT SCROLLING

document.body.style.overflow = "hidden";	//->page unscrollable
document.body.style.overflow = "";		//->scrolling resumed

The drawback of the method is that the scrollbar disappears. If it occupied some space, then that space is now free, and the content “jumps” to fill it.

The solution is to compare clientWidth before and after the freeze, and if it increased (the scrollbar disappeared) then add padding to document.body in place of the scrollbar.


COORDINATES
The document-relative coordinates are calculated relative to the document root element top edge. These coordinates (pageY/pageX) don't change when you scroll (like position: absolute);

Coordinates relative to the window are calculated like position: fixed relative to top window edge. These coordinates (clientY/clientX)do change on scroll.


#########################
V.	ANIMATION LIBRARIES
#########################

GSAP (GreenSock Animation Platform)
SCROLLMAGIC
SAL.JS
SCROLL-OUT