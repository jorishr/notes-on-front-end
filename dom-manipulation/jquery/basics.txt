##############
jQUERY BASICS
#######################################
I.	ABOUT
II.	INSTALLING jQuery
III.	THE $() JQUERY SELECTOR
IV.	CLEAN JQUERY CODE
#######################################

###########
I.	ABOUT
###########

jQuery is a DOM manipulation library that makes it easier to handle events, create animation and manipulate pages.

A library is code(a single file), with mainly functions, that have been written to facilitate various task. Adding a library to a project means you can now access and all that pre-written functionality.

In practice jQuery helps with: 
- creating, selecting and manipulating elements
- animate elements and add effects
- add event listeners
- make HTTP requests(AJAX)

NOTE: 
The DOM API has lots of features already built-in, such as querySelectorAll, etc. so you can do everything in vanillaJS without external dependency. Often there are better performing alternatives that are faster.

It is often not necessary to load ALL those methods. For animations for example you can use smaller libraries, specifically created for that purpose.

###################
II.	ADDING JQUERY
###################

CDN link: add script tag to html head

Locally stored: NPM install jquery --save	

In JS file: import $ from 'jquery';

IN HTML load the jquery at the top, before the other scripts that depend on it are loaded.

Console check: type $ or jQuery -no errors

#####################
III.	JQUERY SELECTOR
#####################

The $() function is similar to the vanillajs querySelectorAll(). It expects a CSS style selector and returns ALL matching elements that can be found in the DOM.


#######################
IV.	CLEAN JQUERY CODE
#######################

Selecting elements, adding event handling and defining functionality in the same statements becomes difficult to read:

    $(".site-header__menuBtn").click(()=>						{console.log("hello")});
    $("h2").onClick(function(){console.log("hello")});

The seperate those functionalities (SOC):
 
	1. use a class constructor for SELECTING ELEMENTS
	2. define eventHandling method
	3. toggle method for toggling classes on elements

EXAMPLE
	
 	class MobileMenu {
  		constructor(){
   			this.siteHeader = $('.site-header');
    			this.menuIcon = $('.site-header__menuIcon');
    			this.menuContent= $('.site-header__menuContent');
    			this.events();
			this.toggle();
  		}

  		events(){
    			this.menuIcon.click(this.toggle.bind(this));
  		}

  		toggle(){
    			this.menuContent.toggleClass('site-							header__menuContent--visible');
    			this.siteHeader.toggleClass('site-header--						expand');
    			this.menuIcon.toggleClass('site-								header__menuIcon--close')
  		}
	}